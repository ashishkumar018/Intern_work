{
  "version": 3,
  "sources": ["../../ol/geom/GeometryCollection.js", "../../ol/format/Feature.js"],
  "sourcesContent": ["/**\r\n * @module ol/geom/GeometryCollection\r\n */\r\nimport EventType from '../events/EventType.js';\r\nimport Geometry from './Geometry.js';\r\nimport {\r\n  closestSquaredDistanceXY,\r\n  createOrUpdateEmpty,\r\n  extend,\r\n  getCenter,\r\n} from '../extent.js';\r\nimport {listen, unlistenByKey} from '../events.js';\r\n\r\n/**\r\n * @classdesc\r\n * An array of {@link module:ol/geom/Geometry~Geometry} objects.\r\n *\r\n * @api\r\n */\r\nclass GeometryCollection extends Geometry {\r\n  /**\r\n   * @param {Array<Geometry>} [geometries] Geometries.\r\n   */\r\n  constructor(geometries) {\r\n    super();\r\n\r\n    /**\r\n     * @private\r\n     * @type {Array<Geometry>}\r\n     */\r\n    this.geometries_ = geometries ? geometries : null;\r\n\r\n    /**\r\n     * @type {Array<import(\"../events.js\").EventsKey>}\r\n     */\r\n    this.changeEventsKeys_ = [];\r\n\r\n    this.listenGeometriesChange_();\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  unlistenGeometriesChange_() {\r\n    this.changeEventsKeys_.forEach(unlistenByKey);\r\n    this.changeEventsKeys_.length = 0;\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  listenGeometriesChange_() {\r\n    if (!this.geometries_) {\r\n      return;\r\n    }\r\n    for (let i = 0, ii = this.geometries_.length; i < ii; ++i) {\r\n      this.changeEventsKeys_.push(\r\n        listen(this.geometries_[i], EventType.CHANGE, this.changed, this)\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Make a complete copy of the geometry.\r\n   * @return {!GeometryCollection} Clone.\r\n   * @api\r\n   */\r\n  clone() {\r\n    const geometryCollection = new GeometryCollection(null);\r\n    geometryCollection.setGeometries(this.geometries_);\r\n    geometryCollection.applyProperties(this);\r\n    return geometryCollection;\r\n  }\r\n\r\n  /**\r\n   * @param {number} x X.\r\n   * @param {number} y Y.\r\n   * @param {import(\"../coordinate.js\").Coordinate} closestPoint Closest point.\r\n   * @param {number} minSquaredDistance Minimum squared distance.\r\n   * @return {number} Minimum squared distance.\r\n   */\r\n  closestPointXY(x, y, closestPoint, minSquaredDistance) {\r\n    if (minSquaredDistance < closestSquaredDistanceXY(this.getExtent(), x, y)) {\r\n      return minSquaredDistance;\r\n    }\r\n    const geometries = this.geometries_;\r\n    for (let i = 0, ii = geometries.length; i < ii; ++i) {\r\n      minSquaredDistance = geometries[i].closestPointXY(\r\n        x,\r\n        y,\r\n        closestPoint,\r\n        minSquaredDistance\r\n      );\r\n    }\r\n    return minSquaredDistance;\r\n  }\r\n\r\n  /**\r\n   * @param {number} x X.\r\n   * @param {number} y Y.\r\n   * @return {boolean} Contains (x, y).\r\n   */\r\n  containsXY(x, y) {\r\n    const geometries = this.geometries_;\r\n    for (let i = 0, ii = geometries.length; i < ii; ++i) {\r\n      if (geometries[i].containsXY(x, y)) {\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../extent.js\").Extent} extent Extent.\r\n   * @protected\r\n   * @return {import(\"../extent.js\").Extent} extent Extent.\r\n   */\r\n  computeExtent(extent) {\r\n    createOrUpdateEmpty(extent);\r\n    const geometries = this.geometries_;\r\n    for (let i = 0, ii = geometries.length; i < ii; ++i) {\r\n      extend(extent, geometries[i].getExtent());\r\n    }\r\n    return extent;\r\n  }\r\n\r\n  /**\r\n   * Return the geometries that make up this geometry collection.\r\n   * @return {Array<Geometry>} Geometries.\r\n   * @api\r\n   */\r\n  getGeometries() {\r\n    return cloneGeometries(this.geometries_);\r\n  }\r\n\r\n  /**\r\n   * @return {Array<Geometry>} Geometries.\r\n   */\r\n  getGeometriesArray() {\r\n    return this.geometries_;\r\n  }\r\n\r\n  /**\r\n   * @return {Array<Geometry>} Geometries.\r\n   */\r\n  getGeometriesArrayRecursive() {\r\n    /** @type {Array<Geometry>} */\r\n    let geometriesArray = [];\r\n    const geometries = this.geometries_;\r\n    for (let i = 0, ii = geometries.length; i < ii; ++i) {\r\n      if (geometries[i].getType() === this.getType()) {\r\n        geometriesArray = geometriesArray.concat(\r\n          /** @type {GeometryCollection} */ (\r\n            geometries[i]\r\n          ).getGeometriesArrayRecursive()\r\n        );\r\n      } else {\r\n        geometriesArray.push(geometries[i]);\r\n      }\r\n    }\r\n    return geometriesArray;\r\n  }\r\n\r\n  /**\r\n   * Create a simplified version of this geometry using the Douglas Peucker algorithm.\r\n   * @param {number} squaredTolerance Squared tolerance.\r\n   * @return {GeometryCollection} Simplified GeometryCollection.\r\n   */\r\n  getSimplifiedGeometry(squaredTolerance) {\r\n    if (this.simplifiedGeometryRevision !== this.getRevision()) {\r\n      this.simplifiedGeometryMaxMinSquaredTolerance = 0;\r\n      this.simplifiedGeometryRevision = this.getRevision();\r\n    }\r\n    if (\r\n      squaredTolerance < 0 ||\r\n      (this.simplifiedGeometryMaxMinSquaredTolerance !== 0 &&\r\n        squaredTolerance < this.simplifiedGeometryMaxMinSquaredTolerance)\r\n    ) {\r\n      return this;\r\n    }\r\n\r\n    const simplifiedGeometries = [];\r\n    const geometries = this.geometries_;\r\n    let simplified = false;\r\n    for (let i = 0, ii = geometries.length; i < ii; ++i) {\r\n      const geometry = geometries[i];\r\n      const simplifiedGeometry =\r\n        geometry.getSimplifiedGeometry(squaredTolerance);\r\n      simplifiedGeometries.push(simplifiedGeometry);\r\n      if (simplifiedGeometry !== geometry) {\r\n        simplified = true;\r\n      }\r\n    }\r\n    if (simplified) {\r\n      const simplifiedGeometryCollection = new GeometryCollection(null);\r\n      simplifiedGeometryCollection.setGeometriesArray(simplifiedGeometries);\r\n      return simplifiedGeometryCollection;\r\n    } else {\r\n      this.simplifiedGeometryMaxMinSquaredTolerance = squaredTolerance;\r\n      return this;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get the type of this geometry.\r\n   * @return {import(\"./Geometry.js\").Type} Geometry type.\r\n   * @api\r\n   */\r\n  getType() {\r\n    return 'GeometryCollection';\r\n  }\r\n\r\n  /**\r\n   * Test if the geometry and the passed extent intersect.\r\n   * @param {import(\"../extent.js\").Extent} extent Extent.\r\n   * @return {boolean} `true` if the geometry and the extent intersect.\r\n   * @api\r\n   */\r\n  intersectsExtent(extent) {\r\n    const geometries = this.geometries_;\r\n    for (let i = 0, ii = geometries.length; i < ii; ++i) {\r\n      if (geometries[i].intersectsExtent(extent)) {\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * @return {boolean} Is empty.\r\n   */\r\n  isEmpty() {\r\n    return this.geometries_.length === 0;\r\n  }\r\n\r\n  /**\r\n   * Rotate the geometry around a given coordinate. This modifies the geometry\r\n   * coordinates in place.\r\n   * @param {number} angle Rotation angle in radians.\r\n   * @param {import(\"../coordinate.js\").Coordinate} anchor The rotation center.\r\n   * @api\r\n   */\r\n  rotate(angle, anchor) {\r\n    const geometries = this.geometries_;\r\n    for (let i = 0, ii = geometries.length; i < ii; ++i) {\r\n      geometries[i].rotate(angle, anchor);\r\n    }\r\n    this.changed();\r\n  }\r\n\r\n  /**\r\n   * Scale the geometry (with an optional origin).  This modifies the geometry\r\n   * coordinates in place.\r\n   * @abstract\r\n   * @param {number} sx The scaling factor in the x-direction.\r\n   * @param {number} [sy] The scaling factor in the y-direction (defaults to sx).\r\n   * @param {import(\"../coordinate.js\").Coordinate} [anchor] The scale origin (defaults to the center\r\n   *     of the geometry extent).\r\n   * @api\r\n   */\r\n  scale(sx, sy, anchor) {\r\n    if (!anchor) {\r\n      anchor = getCenter(this.getExtent());\r\n    }\r\n    const geometries = this.geometries_;\r\n    for (let i = 0, ii = geometries.length; i < ii; ++i) {\r\n      geometries[i].scale(sx, sy, anchor);\r\n    }\r\n    this.changed();\r\n  }\r\n\r\n  /**\r\n   * Set the geometries that make up this geometry collection.\r\n   * @param {Array<Geometry>} geometries Geometries.\r\n   * @api\r\n   */\r\n  setGeometries(geometries) {\r\n    this.setGeometriesArray(cloneGeometries(geometries));\r\n  }\r\n\r\n  /**\r\n   * @param {Array<Geometry>} geometries Geometries.\r\n   */\r\n  setGeometriesArray(geometries) {\r\n    this.unlistenGeometriesChange_();\r\n    this.geometries_ = geometries;\r\n    this.listenGeometriesChange_();\r\n    this.changed();\r\n  }\r\n\r\n  /**\r\n   * Apply a transform function to the coordinates of the geometry.\r\n   * The geometry is modified in place.\r\n   * If you do not want the geometry modified in place, first `clone()` it and\r\n   * then use this function on the clone.\r\n   * @param {import(\"../proj.js\").TransformFunction} transformFn Transform function.\r\n   * Called with a flat array of geometry coordinates.\r\n   * @api\r\n   */\r\n  applyTransform(transformFn) {\r\n    const geometries = this.geometries_;\r\n    for (let i = 0, ii = geometries.length; i < ii; ++i) {\r\n      geometries[i].applyTransform(transformFn);\r\n    }\r\n    this.changed();\r\n  }\r\n\r\n  /**\r\n   * Translate the geometry.  This modifies the geometry coordinates in place.  If\r\n   * instead you want a new geometry, first `clone()` this geometry.\r\n   * @param {number} deltaX Delta X.\r\n   * @param {number} deltaY Delta Y.\r\n   * @api\r\n   */\r\n  translate(deltaX, deltaY) {\r\n    const geometries = this.geometries_;\r\n    for (let i = 0, ii = geometries.length; i < ii; ++i) {\r\n      geometries[i].translate(deltaX, deltaY);\r\n    }\r\n    this.changed();\r\n  }\r\n\r\n  /**\r\n   * Clean up.\r\n   */\r\n  disposeInternal() {\r\n    this.unlistenGeometriesChange_();\r\n    super.disposeInternal();\r\n  }\r\n}\r\n\r\n/**\r\n * @param {Array<Geometry>} geometries Geometries.\r\n * @return {Array<Geometry>} Cloned geometries.\r\n */\r\nfunction cloneGeometries(geometries) {\r\n  const clonedGeometries = [];\r\n  for (let i = 0, ii = geometries.length; i < ii; ++i) {\r\n    clonedGeometries.push(geometries[i].clone());\r\n  }\r\n  return clonedGeometries;\r\n}\r\n\r\nexport default GeometryCollection;\r\n", "/**\r\n * @module ol/format/Feature\r\n */\r\nimport {abstract} from '../util.js';\r\nimport {\r\n  equivalent as equivalentProjection,\r\n  get as getProjection,\r\n  transformExtent,\r\n} from '../proj.js';\r\n\r\n/**\r\n * @typedef {Object} ReadOptions\r\n * @property {import(\"../proj.js\").ProjectionLike} [dataProjection] Projection of the data we are reading.\r\n * If not provided, the projection will be derived from the data (where possible) or\r\n * the `dataProjection` of the format is assigned (where set). If the projection\r\n * can not be derived from the data and if no `dataProjection` is set for a format,\r\n * the features will not be reprojected.\r\n * @property {import(\"../extent.js\").Extent} [extent] Tile extent in map units of the tile being read.\r\n * This is only required when reading data with tile pixels as geometry units. When configured,\r\n * a `dataProjection` with `TILE_PIXELS` as `units` and the tile's pixel extent as `extent` needs to be\r\n * provided.\r\n * @property {import(\"../proj.js\").ProjectionLike} [featureProjection] Projection of the feature geometries\r\n * created by the format reader. If not provided, features will be returned in the\r\n * `dataProjection`.\r\n */\r\n\r\n/**\r\n * @typedef {Object} WriteOptions\r\n * @property {import(\"../proj.js\").ProjectionLike} [dataProjection] Projection of the data we are writing.\r\n * If not provided, the `dataProjection` of the format is assigned (where set).\r\n * If no `dataProjection` is set for a format, the features will be returned\r\n * in the `featureProjection`.\r\n * @property {import(\"../proj.js\").ProjectionLike} [featureProjection] Projection of the feature geometries\r\n * that will be serialized by the format writer. If not provided, geometries are assumed\r\n * to be in the `dataProjection` if that is set; in other words, they are not transformed.\r\n * @property {boolean} [rightHanded] When writing geometries, follow the right-hand\r\n * rule for linear ring orientation.  This means that polygons will have counter-clockwise\r\n * exterior rings and clockwise interior rings.  By default, coordinates are serialized\r\n * as they are provided at construction.  If `true`, the right-hand rule will\r\n * be applied.  If `false`, the left-hand rule will be applied (clockwise for\r\n * exterior and counter-clockwise for interior rings).  Note that not all\r\n * formats support this.  The GeoJSON format does use this property when writing\r\n * geometries.\r\n * @property {number} [decimals] Maximum number of decimal places for coordinates.\r\n * Coordinates are stored internally as floats, but floating-point arithmetic can create\r\n * coordinates with a large number of decimal places, not generally wanted on output.\r\n * Set a number here to round coordinates. Can also be used to ensure that\r\n * coordinates read in can be written back out with the same number of decimals.\r\n * Default is no rounding.\r\n */\r\n\r\n/**\r\n * @typedef {'arraybuffer' | 'json' | 'text' | 'xml'} Type\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * Abstract base class; normally only used for creating subclasses and not\r\n * instantiated in apps.\r\n * Base class for feature formats.\r\n * {@link module:ol/format/Feature~FeatureFormat} subclasses provide the ability to decode and encode\r\n * {@link module:ol/Feature~Feature} objects from a variety of commonly used geospatial\r\n * file formats.  See the documentation for each format for more details.\r\n *\r\n * @abstract\r\n * @api\r\n */\r\nclass FeatureFormat {\r\n  constructor() {\r\n    /**\r\n     * @protected\r\n     * @type {import(\"../proj/Projection.js\").default|undefined}\r\n     */\r\n    this.dataProjection = undefined;\r\n\r\n    /**\r\n     * @protected\r\n     * @type {import(\"../proj/Projection.js\").default|undefined}\r\n     */\r\n    this.defaultFeatureProjection = undefined;\r\n\r\n    /**\r\n     * A list media types supported by the format in descending order of preference.\r\n     * @type {Array<string>}\r\n     */\r\n    this.supportedMediaTypes = null;\r\n  }\r\n\r\n  /**\r\n   * Adds the data projection to the read options.\r\n   * @param {Document|Element|Object|string} source Source.\r\n   * @param {ReadOptions} [options] Options.\r\n   * @return {ReadOptions|undefined} Options.\r\n   * @protected\r\n   */\r\n  getReadOptions(source, options) {\r\n    if (options) {\r\n      let dataProjection = options.dataProjection\r\n        ? getProjection(options.dataProjection)\r\n        : this.readProjection(source);\r\n      if (\r\n        options.extent &&\r\n        dataProjection &&\r\n        dataProjection.getUnits() === 'tile-pixels'\r\n      ) {\r\n        dataProjection = getProjection(dataProjection);\r\n        dataProjection.setWorldExtent(options.extent);\r\n      }\r\n      options = {\r\n        dataProjection: dataProjection,\r\n        featureProjection: options.featureProjection,\r\n      };\r\n    }\r\n    return this.adaptOptions(options);\r\n  }\r\n\r\n  /**\r\n   * Sets the `dataProjection` on the options, if no `dataProjection`\r\n   * is set.\r\n   * @param {WriteOptions|ReadOptions|undefined} options\r\n   *     Options.\r\n   * @protected\r\n   * @return {WriteOptions|ReadOptions|undefined}\r\n   *     Updated options.\r\n   */\r\n  adaptOptions(options) {\r\n    return Object.assign(\r\n      {\r\n        dataProjection: this.dataProjection,\r\n        featureProjection: this.defaultFeatureProjection,\r\n      },\r\n      options\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @abstract\r\n   * @return {Type} The format type.\r\n   */\r\n  getType() {\r\n    return abstract();\r\n  }\r\n\r\n  /**\r\n   * Read a single feature from a source.\r\n   *\r\n   * @abstract\r\n   * @param {Document|Element|Object|string} source Source.\r\n   * @param {ReadOptions} [options] Read options.\r\n   * @return {import(\"../Feature.js\").FeatureLike} Feature.\r\n   */\r\n  readFeature(source, options) {\r\n    return abstract();\r\n  }\r\n\r\n  /**\r\n   * Read all features from a source.\r\n   *\r\n   * @abstract\r\n   * @param {Document|Element|ArrayBuffer|Object|string} source Source.\r\n   * @param {ReadOptions} [options] Read options.\r\n   * @return {Array<import(\"../Feature.js\").FeatureLike>} Features.\r\n   */\r\n  readFeatures(source, options) {\r\n    return abstract();\r\n  }\r\n\r\n  /**\r\n   * Read a single geometry from a source.\r\n   *\r\n   * @abstract\r\n   * @param {Document|Element|Object|string} source Source.\r\n   * @param {ReadOptions} [options] Read options.\r\n   * @return {import(\"../geom/Geometry.js\").default} Geometry.\r\n   */\r\n  readGeometry(source, options) {\r\n    return abstract();\r\n  }\r\n\r\n  /**\r\n   * Read the projection from a source.\r\n   *\r\n   * @abstract\r\n   * @param {Document|Element|Object|string} source Source.\r\n   * @return {import(\"../proj/Projection.js\").default|undefined} Projection.\r\n   */\r\n  readProjection(source) {\r\n    return abstract();\r\n  }\r\n\r\n  /**\r\n   * Encode a feature in this format.\r\n   *\r\n   * @abstract\r\n   * @param {import(\"../Feature.js\").default} feature Feature.\r\n   * @param {WriteOptions} [options] Write options.\r\n   * @return {string|ArrayBuffer} Result.\r\n   */\r\n  writeFeature(feature, options) {\r\n    return abstract();\r\n  }\r\n\r\n  /**\r\n   * Encode an array of features in this format.\r\n   *\r\n   * @abstract\r\n   * @param {Array<import(\"../Feature.js\").default>} features Features.\r\n   * @param {WriteOptions} [options] Write options.\r\n   * @return {string|ArrayBuffer} Result.\r\n   */\r\n  writeFeatures(features, options) {\r\n    return abstract();\r\n  }\r\n\r\n  /**\r\n   * Write a single geometry in this format.\r\n   *\r\n   * @abstract\r\n   * @param {import(\"../geom/Geometry.js\").default} geometry Geometry.\r\n   * @param {WriteOptions} [options] Write options.\r\n   * @return {string|ArrayBuffer} Result.\r\n   */\r\n  writeGeometry(geometry, options) {\r\n    return abstract();\r\n  }\r\n}\r\n\r\nexport default FeatureFormat;\r\n\r\n/**\r\n * @param {import(\"../geom/Geometry.js\").default} geometry Geometry.\r\n * @param {boolean} write Set to true for writing, false for reading.\r\n * @param {WriteOptions|ReadOptions} [options] Options.\r\n * @return {import(\"../geom/Geometry.js\").default} Transformed geometry.\r\n */\r\nexport function transformGeometryWithOptions(geometry, write, options) {\r\n  const featureProjection = options\r\n    ? getProjection(options.featureProjection)\r\n    : null;\r\n  const dataProjection = options ? getProjection(options.dataProjection) : null;\r\n\r\n  let transformed;\r\n  if (\r\n    featureProjection &&\r\n    dataProjection &&\r\n    !equivalentProjection(featureProjection, dataProjection)\r\n  ) {\r\n    transformed = (write ? geometry.clone() : geometry).transform(\r\n      write ? featureProjection : dataProjection,\r\n      write ? dataProjection : featureProjection\r\n    );\r\n  } else {\r\n    transformed = geometry;\r\n  }\r\n  if (\r\n    write &&\r\n    options &&\r\n    /** @type {WriteOptions} */ (options).decimals !== undefined\r\n  ) {\r\n    const power = Math.pow(10, /** @type {WriteOptions} */ (options).decimals);\r\n    // if decimals option on write, round each coordinate appropriately\r\n    /**\r\n     * @param {Array<number>} coordinates Coordinates.\r\n     * @return {Array<number>} Transformed coordinates.\r\n     */\r\n    const transform = function (coordinates) {\r\n      for (let i = 0, ii = coordinates.length; i < ii; ++i) {\r\n        coordinates[i] = Math.round(coordinates[i] * power) / power;\r\n      }\r\n      return coordinates;\r\n    };\r\n    if (transformed === geometry) {\r\n      transformed = geometry.clone();\r\n    }\r\n    transformed.applyTransform(transform);\r\n  }\r\n  return transformed;\r\n}\r\n\r\n/**\r\n * @param {import(\"../extent.js\").Extent} extent Extent.\r\n * @param {ReadOptions} [options] Read options.\r\n * @return {import(\"../extent.js\").Extent} Transformed extent.\r\n */\r\nexport function transformExtentWithOptions(extent, options) {\r\n  const featureProjection = options\r\n    ? getProjection(options.featureProjection)\r\n    : null;\r\n  const dataProjection = options ? getProjection(options.dataProjection) : null;\r\n\r\n  if (\r\n    featureProjection &&\r\n    dataProjection &&\r\n    !equivalentProjection(featureProjection, dataProjection)\r\n  ) {\r\n    return transformExtent(extent, dataProjection, featureProjection);\r\n  } else {\r\n    return extent;\r\n  }\r\n}\r\n"],
  "mappings": "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",
  "names": []
}
