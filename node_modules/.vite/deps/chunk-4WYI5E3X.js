import {
  IMAGE_DECODE
} from "./chunk-GNQX43MN.js";
import {
  EventType_default,
  Target_default,
  abstract,
  listenOnce,
  unlistenByKey
} from "./chunk-Q5VNZECX.js";

// node_modules/ol/ImageState.js
var ImageState_default = {
  IDLE: 0,
  LOADING: 1,
  LOADED: 2,
  ERROR: 3,
  EMPTY: 4
};

// node_modules/ol/ImageBase.js
var ImageBase = class extends Target_default {
  constructor(extent, resolution, pixelRatio, state) {
    super();
    this.extent = extent;
    this.pixelRatio_ = pixelRatio;
    this.resolution = resolution;
    this.state = state;
  }
  changed() {
    this.dispatchEvent(EventType_default.CHANGE);
  }
  getExtent() {
    return this.extent;
  }
  getImage() {
    return abstract();
  }
  getPixelRatio() {
    return this.pixelRatio_;
  }
  getResolution() {
    return this.resolution;
  }
  getState() {
    return this.state;
  }
  load() {
    abstract();
  }
};
var ImageBase_default = ImageBase;

// node_modules/ol/Image.js
function listenImage(image, loadHandler, errorHandler) {
  const img = image;
  let listening = true;
  let decoding = false;
  let loaded = false;
  const listenerKeys = [
    listenOnce(img, EventType_default.LOAD, function() {
      loaded = true;
      if (!decoding) {
        loadHandler();
      }
    })
  ];
  if (img.src && IMAGE_DECODE) {
    decoding = true;
    img.decode().then(function() {
      if (listening) {
        loadHandler();
      }
    }).catch(function(error) {
      if (listening) {
        if (loaded) {
          loadHandler();
        } else {
          errorHandler();
        }
      }
    });
  } else {
    listenerKeys.push(listenOnce(img, EventType_default.ERROR, errorHandler));
  }
  return function unlisten() {
    listening = false;
    listenerKeys.forEach(unlistenByKey);
  };
}

export {
  ImageState_default,
  ImageBase_default,
  listenImage
};
//# sourceMappingURL=chunk-4WYI5E3X.js.map
